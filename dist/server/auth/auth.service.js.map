{"version":3,"sources":["../../../server/auth/auth.service.js"],"names":[],"mappings":"AAAA;;;;;QAiBgB;QA2BA;QAoBA;QASA;;AAvEhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,cAAc,0BAAW;AACzB,YAAQ,sBAAO,OAAP,CAAe,OAAf;CADM,CAAd;;;;;;AAQG,SAAS,eAAT,GAA2B;AAC9B,WAAO;;KAEF,GAFE,CAEE,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;;AAE1B,YAAI,IAAI,KAAJ,IAAa,IAAI,KAAJ,CAAU,cAAV,CAAyB,cAAzB,CAAb,EAAuD;AACvD,gBAAI,OAAJ,CAAY,aAAZ,GAA4B,YAAY,IAAI,KAAJ,CAAU,YAAV,CADe;SAA3D;AAGA,oBAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAL0B;KAAzB;;AAFF,KAUF,GAVE,CAUE,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC1B,uBAAK,QAAL,CAAc,IAAI,IAAJ,CAAS,GAAT,CAAd,CAA4B,IAA5B,GACK,IADL,CACU,gBAAQ;AACV,gBAAI,CAAC,IAAD,EAAO;AACP,uBAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP,CADO;aAAX;AAGA,gBAAI,IAAJ,GAAW,IAAX,CAJU;AAKV,mBALU;SAAR,CADV,CAQK,KARL,CAQW;mBAAO,KAAK,GAAL;SAAP,CARX,CAD0B;KAAzB,CAVT,CAD8B;CAA3B;;;;;AA2BA,SAAS,OAAT,CAAiB,YAAjB,EAA+B;AAClC,QAAI,CAAC,YAAD,EAAe;AACf,cAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN,CADe;KAAnB;;AAIA,WAAO,sCACF,GADE,CACE,iBADF,EAEF,GAFE,CAEE,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C;AAC5C,YAAI,sBAAO,SAAP,CAAiB,OAAjB,CAAyB,IAAI,IAAJ,CAAS,IAAT,CAAzB,IACA,sBAAO,SAAP,CAAiB,OAAjB,CAAyB,YAAzB,CADA,EACwC;AACxC,mBADwC;SAD5C,MAGO;AACH,gBAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,WAArB,EADG;SAHP;KADC,CAFT,CALkC;CAA/B;;;;;AAoBA,SAAS,SAAT,CAAmB,EAAnB,EAAuB,IAAvB,EAA6B;AAChC,WAAO,uBAAI,IAAJ,CAAS,EAAE,KAAK,EAAL,EAAS,MAAM,IAAN,EAApB,EAAkC,sBAAO,OAAP,CAAe,OAAf,EAAwB;AAC7D,mBAAW,KAAK,EAAL,GAAU,CAAV;KADR,CAAP,CADgC;CAA7B;;;;;AASA,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC;AACrC,QAAI,CAAC,IAAI,IAAJ,EAAU;AACX,eAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,wDAArB,CAAP,CADW;KAAf;AAGA,QAAI,QAAQ,UAAU,IAAI,IAAJ,CAAS,GAAT,EAAc,IAAI,IAAJ,CAAS,IAAT,CAAhC,CAJiC;AAKrC,QAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB,EALqC;AAMrC,QAAI,QAAJ,CAAa,GAAb,EANqC;CAAlC","file":"auth.service.js","sourcesContent":["'use strict';\n\nimport passport from 'passport'\nimport config from '../config/environment'\nimport jwt from 'jsonwebtoken'\nimport expressJwt from 'express-jwt'\nimport compose from 'composable-middleware'\nimport User from '../api/user/user.model'\n\nvar validateJwt = expressJwt({\n    secret: config.secrets.session\n})\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nexport function isAuthenticated() {\n    return compose()\n        // Validate jwt\n        .use(function(req, res, next) {\n            // allow access_token to be passed through query parameter as well\n            if (req.query && req.query.hasOwnProperty('access_token')) {\n                req.headers.authorization = 'Bearer ' + req.query.access_token\n            }\n            validateJwt(req, res, next)\n        })\n        // Attach user to request\n        .use(function(req, res, next) {\n            User.findById(req.user._id).exec()\n                .then(user => {\n                    if (!user) {\n                        return res.status(401).end()\n                    }\n                    req.user = user\n                    next()\n                })\n                .catch(err => next(err))\n        })\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\nexport function hasRole(roleRequired) {\n    if (!roleRequired) {\n        throw new Error('Required role needs to be set')\n    }\n\n    return compose()\n        .use(isAuthenticated())\n        .use(function meetsRequirements(req, res, next) {\n            if (config.userRoles.indexOf(req.user.role) >=\n                config.userRoles.indexOf(roleRequired)) {\n                next()\n            } else {\n                res.status(403).send('Forbidden')\n            }\n        })\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nexport function signToken(id, role) {\n    return jwt.sign({ _id: id, role: role }, config.secrets.session, {\n        expiresIn: 60 * 60 * 5\n    })\n}\n\n/**\n * Set token cookie directly for oAuth strategies\n */\nexport function setTokenCookie(req, res) {\n    if (!req.user) {\n        return res.status(404).send('It looks like you aren\\'t logged in, please try again.')\n    }\n    var token = signToken(req.user._id, req.user.role)\n    res.cookie('token', token)\n    res.redirect('/')\n}\n"]}