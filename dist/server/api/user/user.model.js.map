{"version":3,"sources":["../../../../server/api/user/user.model.js"],"names":[],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto'\nimport mongoose from 'mongoose'\nmongoose.Promise = require('bluebird')\nimport { Schema } from 'mongoose'\n\nvar UserSchema = new Schema({\n    name: String,\n    email: {\n        type: String,\n        lowercase: true\n    },\n    role: {\n        type: String,\n        default: 'user'\n    },\n    password: String,\n    provider: String,\n    salt: String\n})\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n    .virtual('profile')\n    .get(function() {\n        return {\n            'name': this.name,\n            'role': this.role\n        }\n    })\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n    .virtual('token')\n    .get(function() {\n        return {\n            '_id': this._id,\n            'role': this.role\n        }\n    })\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n    .path('email')\n    .validate(function(email) {\n        return email.length\n    }, 'Email cannot be blank')\n\n// Validate empty password\nUserSchema\n    .path('password')\n    .validate(function(password) {\n        return password.length\n    }, 'Password cannot be blank')\n\n// Validate email is not taken\nUserSchema\n    .path('email')\n    .validate(function(value, respond) {\n        var self = this\n        return this.constructor.findOne({ email: value }).exec()\n            .then(function(user) {\n                if (user) {\n                    if (self.id === user.id) {\n                        return respond(true)\n                    }\n                    return respond(false)\n                }\n                return respond(true)\n            })\n            .catch(function(err) {\n                throw err\n            })\n    }, 'The specified email address is already in use.')\n\nvar validatePresenceOf = function(value) {\n    return value && value.length\n}\n\n/**\n * Pre-save hook\n */\nUserSchema\n    .pre('save', function(next) {\n        // Handle new/update passwords\n        if (!this.isModified('password')) {\n            return next()\n        }\n\n        if (!validatePresenceOf(this.password)) {\n            return next(new Error('Invalid password'))\n        }\n\n        // Make salt with a callback\n        this.makeSalt((saltErr, salt) => {\n            if (saltErr) {\n                return next(saltErr)\n            }\n            this.salt = salt\n            this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n                if (encryptErr) {\n                    return next(encryptErr)\n                }\n                this.password = hashedPassword\n                next()\n            })\n        })\n    })\n\n/**\n * Methods\n */\nUserSchema.methods = {\n    /**\n     * Authenticate - check if the passwords are the same\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {Boolean}\n     * @api public\n     */\n    authenticate(password, callback) {\n        if (!callback) {\n            return this.password === this.encryptPassword(password)\n        }\n\n        this.encryptPassword(password, (err, pwdGen) => {\n            if (err) {\n                return callback(err)\n            }\n\n            if (this.password === pwdGen) {\n                callback(null, true)\n            } else {\n                callback(null, false)\n            }\n        })\n    },\n\n    /**\n     * Make salt\n     *\n     * @param {Number} byteSize Optional salt byte size, default to 16\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n    makeSalt(byteSize, callback) {\n        var defaultByteSize = 16\n\n        if (typeof arguments[0] === 'function') {\n            callback = arguments[0]\n            byteSize = defaultByteSize\n        } else if (typeof arguments[1] === 'function') {\n            callback = arguments[1]\n        }\n\n        if (!byteSize) {\n            byteSize = defaultByteSize\n        }\n\n        if (!callback) {\n            return crypto.randomBytes(byteSize).toString('base64')\n        }\n\n        return crypto.randomBytes(byteSize, (err, salt) => {\n            if (err) {\n                callback(err)\n            } else {\n                callback(null, salt.toString('base64'))\n            }\n        })\n    },\n\n    /**\n     * Encrypt password\n     *\n     * @param {String} password\n     * @param {Function} callback\n     * @return {String}\n     * @api public\n     */\n    encryptPassword(password, callback) {\n        if (!password || !this.salt) {\n            return null\n        }\n\n        var defaultIterations = 10000\n        var defaultKeyLength = 64\n        var salt = new Buffer(this.salt, 'base64')\n\n        if (!callback) {\n            return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                .toString('base64')\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\n            if (err) {\n                callback(err)\n            } else {\n                callback(null, key.toString('base64'))\n            }\n        })\n    }\n}\n\nexport default mongoose.model('User', UserSchema)\n"]}