{"version":3,"sources":["../../../../server/api/animals/animals.integration.js"],"names":[],"mappings":"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","file":"animals.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newAnimals;\n\ndescribe('Animals API:', function() {\n\n  describe('GET /api/animal', function() {\n    var animalss;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/animal')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          animalss = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      animalss.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/animal', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/animal')\n        .send({\n          name: 'New Animals',\n          info: 'This is the brand new animals!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newAnimals = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created animals', function() {\n      newAnimals.name.should.equal('New Animals');\n      newAnimals.info.should.equal('This is the brand new animals!!!');\n    });\n\n  });\n\n  describe('GET /api/animal/:id', function() {\n    var animals;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/animal/' + newAnimals._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          animals = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      animals = {};\n    });\n\n    it('should respond with the requested animals', function() {\n      animals.name.should.equal('New Animals');\n      animals.info.should.equal('This is the brand new animals!!!');\n    });\n\n  });\n\n  describe('PUT /api/animal/:id', function() {\n    var updatedAnimals;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/animal/' + newAnimals._id)\n        .send({\n          name: 'Updated Animals',\n          info: 'This is the updated animals!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedAnimals = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedAnimals = {};\n    });\n\n    it('should respond with the updated animals', function() {\n      updatedAnimals.name.should.equal('Updated Animals');\n      updatedAnimals.info.should.equal('This is the updated animals!!!');\n    });\n\n  });\n\n  describe('DELETE /api/animal/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/animal/' + newAnimals._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when animals does not exist', function(done) {\n      request(app)\n        .delete('/api/animal/' + newAnimals._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}